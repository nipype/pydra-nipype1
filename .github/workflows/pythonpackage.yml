#This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

# Set once
env:
  SUBPACKAGE: nipype1

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  devcheck:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.7', '3.11' ]  # Check oldest and newest versions
        pip-flags: [ '', '--editable' ]
        pydra:
          - 'pydra'
          - '--editable git+https://github.com/nipype/pydra.git#egg=pydra'

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
      - name: Install Pydra
        run: |
          pip install ${{ matrix.pydra }}
          python -c "import pydra as m; print(f'{m.__name__} {m.__version__} @ {m.__file__}')"
      - name: Install task package
        run: |
          pip install ${{ matrix.pip-flags }} ".[dev]"
          python -c "import pydra.tasks.$SUBPACKAGE as m; print(f'{m.__name__} {m.__version__} @ {m.__file__}')"
          python -c "import pydra as m; print(f'{m.__name__} {m.__version__} @ {m.__file__}')"

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.7', '3.8', '3.9', '3.10', '3.11' ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up NeuroDebian
        run: bash <(wget -q -O- http://neuro.debian.net/_files/neurodebian-travis.sh)
      - name: Install FSL
        run: sudo apt-get install -y fsl
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
      - name: Install task package
        run: |
          pip install ".[test]"
          python -c "import pydra.tasks.$SUBPACKAGE as m; print(f'{m.__name__} {m.__version__} @ {m.__file__}')"
          python -c "import pydra as m; print(f'{m.__name__} {m.__version__} @ {m.__file__}')"
      - name: Test with pytest
        run: |
          source /etc/fsl/fsl.sh
          pytest -sv --doctest-modules pydra/tasks/$SUBPACKAGE \
              --cov pydra.tasks.$SUBPACKAGE --cov-report xml
      - uses: codecov/codecov-action@v1
        if: ${{ always() }}

  deploy:
    needs: [ devcheck, test ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.9' ]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install build tools
        run: python -m pip install build twine
      - name: Build source and wheel distributions
        run: python -m build
      - name: Check distributions
        run: twine check dist/*
      - uses: actions/upload-artifact@v2
        with:
          name: distributions
          path: dist/
